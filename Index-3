const drawLollipopChart = (container, data, title) => {
    const { width, height, fontScale } = getResponsiveDimensions(container);
    const svg = d3.select(container).append('svg')
        .attr('viewBox', `0 0 ${width} ${height}`)
        .style('font-size', `${12 * fontScale}px`);
    const { margin } = chartConfig;
    const x = d3.scalePoint().domain(data.map(d => d.label)).range([margin.left, width - margin.right]);
    
    // Adjust y-axis to focus on small differences
    const minValue = d3.min(data, d => d.value);
    const maxValue = d3.max(data, d => d.value);
    const y = d3.scaleLinear()
        .domain([minValue - 10, maxValue + 10]) // Small padding around data range
        .range([height - margin.bottom, margin.top]);

    createChartBase(svg, width, height, x, y, fontScale);

    // Amplify small differences
    const heightMultiplier = 5; // Amplify height differences by 5x
    const lollipopHeight = d => (height - margin.bottom - y(d.value)) * heightMultiplier;

    // Draw sticks
    svg.selectAll('.lollipop-stick')
        .data(data)
        .enter()
        .append('line')
        .attr('class', 'lollipop-stick')
        .attr('x1', d => x(d.label))
        .attr('x2', d => x(d.label))
        .attr('y1', height - margin.bottom)
        .attr('y2', d => y(d.value))
        .attr('stroke', getCSSVariable('--primary'))
        .attr('stroke-width', 2);

    // Draw lollipop heads (circles)
    svg.selectAll('.lollipop-head')
        .data(data)
        .enter()
        .append('circle')
        .attr('class', 'lollipop-head')
        .attr('cx', d => x(d.label))
        .attr('cy', d => y(d.value))
        .attr('r', d => Math.min(10 + (d.value - minValue) * 0.5, 20)) // Dynamic radius based on value difference
        .attr('fill', getCSSVariable('--primary'));

    // Animation for sticks
    svg.selectAll('.lollipop-stick')
        .attr('y2', height - margin.bottom)
        .transition()
        .duration(chartConfig.animationDuration)
        .attr('y2', d => y(d.value));

    // Animation for heads
    svg.selectAll('.lollipop-head')
        .attr('r', 0)
        .transition()
        .duration(chartConfig.animationDuration)
        .delay((d, i) => i * 100)
        .attr('r', d => Math.min(10 + (d.value - minValue) * 0.5, 20));

    svg.on('click', () => showDetails(data, 'lollipop', `Distribution of ${title}`));
};
